#! /bin/sh

# configs
# varname=${varname:-default}
[ -z "$warn_time" ]       && warn_time="3600"  # seconds
[ -z "$rss_feed" ]        && rss_feed="http://www.archlinux.org/feeds/news/"
[ -z "$log_file" ]        && log_file="/var/log/arch-news.log"
[ -z "$pacdiff_program" ] && pacdiff_program="pacdiff"
[ -z "$pacman_program" ]  && pacman_program="pacman"

# log file has one line per entry, with a unix time stamp and escaped news blurb

# Issues:
# Lots of dirty hacks for processing the RSS subset of XML.
# pacdiff integration is pretty crude.
# Switch to a real config file if it gets one more option.

# Todo:
# More unixy env vars.
# Catch/log pacman return codes.
# Merge serial seds.
# Backup db.
# Low disk check.
#   df -ka | grep '% /$' | tr -s ' ' | cut -d ' ' -f 4 
#   but can't actually integrate into pacman
#   wrote patch for Clyde instead
# sledgehammer says to watch arch-dev-public and arch-commits arch-dev-public and arch-commits 

function clean_rss ()  # none : xml
{
    # make xml less unfriendly to grep
    # escape \n | remove literal \n | opening tags get a line
    wget -t 1 -T 10 -q -O - "$rss_feed" | sed "s/^/\\\\n/g" | tr -s "\r\n" " " | sed -r "s/<[^\/]/\n&/g"
}

function tag_chop ()  # xml string : string
{
    # this only works for the innermost tags
    local data=$1
    local tag=$2
    #sed "s/<[\/]\?$tag>//g"  sed "s|</?$tag>||g"
    echo "$data" | grep -o "<$tag>.*</$tag>" | sed "s/<$tag>//g" | sed "s/<\/$tag>//g"
}

function log_time ()  # datetime : seconds
{
    # turns a timestamp from pacman.log into unix time
    local stamp=`echo "$1 $2" | grep -o -E "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}"`
    date -d "$stamp" +%s
}

function last_sync ()  # none : datetime
{
    # can not tell if last sync failed/aborted
    log_time `grep 'synchronizing package lists' /var/log/pacman.log | tail -n 1`
}

function last_upgrade ()  # none : datetime
{
    # can not tell if last update failed/aborted
    log_time `grep 'starting full system upgrade' /var/log/pacman.log | tail -n 1`
}

function publication_dates ()  # xml : seconds
{
    # collect xml time stamps and unix time them
    tag_chop "$1" "pubDate" | while read line ; do
        date -d "$line" +%s
    done
}

function get_news_log ()  # none : seconds
{
    # returns timestamp of last news seen
    if [ -f $log_file ]; then
        tail -n 1 $log_file | grep -o "^[0-9]*"
    else
        echo "0"
    fi
}

function xml_decode() # string : string
{
    echo "$1" | sed 's/\t/ /g' | tr -s ' ' | sed 's/&lt;/</g' | sed 's/&gt;/>/g' | sed 's/&amp;/&/g'
}

function check_news ()  # none : news (logfile)
{
    last_news_date=`get_news_log`
    clean=`clean_rss`
    pubdates=`mktemp`
    descriptions=`mktemp`
    header="The latest and greatest news from the Arch Linux distribution."
    publication_dates "$clean" > "$pubdates"
    tag_chop "$clean" "description" | grep -v "$header" > "$descriptions"
    # paste is much happier with files
    paste "$pubdates" "$descriptions" | tac | while read -r line ; do
	line2=`xml_decode "$line"`
	this_date=`echo -n "$line2" | cut -d ' ' -f 1 | sed 's/ //g'`
	if [ $(( $this_date )) -gt $(( $last_news_date )) ]; then
	    echo "$line2" | cut -d ' ' -f 2- | sed 's|<br />||g' | sed 's|\\n||g'
	    echo ""
	    echo "$line2" >> $log_file
	fi
    done
    rm "$pubdates"
    rm "$descriptions"
}

function pacnew_count ()  # none : int
{
    find /etc/ \( -name \*.pacnew -o -name \*.pacorig -o -name \*.pacsave \) | wc -l
}

function docs ()  # none : docs
{
    echo -e "Usage: `basename $0` -arg [packages]"
    echo -e "\nPacmatic is a pacman wrapper that takes care of menial but critial tasks."
    echo -e "\nThese include"
    echo -e "\tChecking the archlinux.org news"
    echo -e "\tReminding if it has been a while since the last sync"
    echo -e "\tReporting pacnew files"
    echo -e "\tEditing pacnew files"
    echo -e "\nThe following environment variables can be set"
    echo -e "\twarn_time=\"$warn_time\"  # (seconds)"
    echo -e "\trss_feed=\"$rss_feed\""
    echo -e "\tlog_file=\"$log_file\""
    echo -e "\tpacdiff_program=\"$pacdiff_program\""
    echo -e "\tpacman_program=\"$pacman_program\""
    echo -e ""
}

if [ $# -eq 0 ]; then
    docs
fi
current_time=`date +%s`
sync_time=`last_sync`
upgrade_time=`last_upgrade`

case "$1" in 
    -Syu|-Su|-Suy|-Syyu|-Syuy|-Suyy)
        check_news
        ;;
    -S)
        check_news
        if [ $(( $sync_time - $upgrade_time )) -gt $(( $warn_time )) ]; then
            echo -e "\n\nWarning: stale installation, rerun with '-Syu'\n\n"
        fi
	;;
    -Sy|-Syy)
        check_news
        if [ $(( $current_time - $upgrade_time )) -gt $(( $warn_time )) ]; then
            echo -e "\n\nWarning: stale installation, rerun with '-Syu'\n\n"
        fi
	;;
esac

old_pc=`pacnew_count`
$pacman_program $*
new_pc=`pacnew_count`
add_pc=$(( $new_pc - $old_pc ))

# this section is a little clumsy

if [ "$new_pc" = "0" ]; then
  echo "No pacnew files to update."
  exit 0
fi

case "$1" in
    -Syu|-Su|-S|-Sy)
	echo -en "\n$new_pc pacnew files found ($add_pc added).  Update files now? (Y/n) "
	read char
	if [ -z "$char" ]; then
	    $pacdiff_program
	fi
	case "$char" in
	    Y|y)
	        $pacdiff_program
		;;
	    N|n)
	        ;;
	    *)
	        ;;
	esac
	;;
    *)
        ;;
esac


